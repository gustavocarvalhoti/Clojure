#Clojure - Roda na JVM
*************************************************************************
#Forçar o reload (Tosco)
(require '[forca.core :as forca] :reload)

#Leiningen - Para ajudar a criar o projeto
https://leiningen.org/#install
#Copiar o arquivo lein para o bin
$cp lein /bin
$lein
#Pronto está instalado

$lein repl <- Entra na aplicação
o comando começa e termina com "()"
Ex: (+ 1 2) Significa 1 + 2
Ex: (* 1 2) Significa 1 * 2
Ex: (/ 10 2) Significa 10 / 2
Ex: (- 2 1) Significa 2 + 1

NÂO EXISTEM VARIAVEIS \o/
EXISTE SOMENTE VARIAVEL FINAL

#Criando uma aplicação
lein new app forca
(def total-de-vidas 6)

#Função - defn define uma função
(defn mult2 [x] (* x 2)) <- Multiplica por 2
(defn mult2 [x] (* x (+ 2 x))) <- Multiplica x por 2+x
(defn pow3 [x] (* x (Math/pow 2 x))) <- Pow3 que recebe um parâmetro x e devolve a multiplicação de x por 2 elevado a x.
(defn perdeu [] (print "Você perdeu!")) <- Não recebe nada

#Chama a função
(forca/perdeu)

#nil é o nullo do Cloujure

#Não igual
(not= 10 11)

#Declara uma lista
(def nums [1 2 3 4])

#Utilizando a função default map) <- Ela recebe uma função e uma lista
(def nums [1 2 3 4])
(defn mult [x] (* x 2))           <- Função
(map mult nums)                   <- Função MAP, fez um for \0/
Resultado: (2 4 6 8)
#Da para fazer direto tb
(map (fn mult [x] (* x 2)) nums)  <- Nesse caso é uma função sem nome

#Removendo do array geral
(def nums [1 2 3 4 5 6 7 8 9 10])
(remove par nums)                 <- Remove os numeros pares
(remove (fn [x] (not= 0 (rem x 2))) numeros) <- Remove os numeros impares

#Entendendo essa função
(defn jogo [vidas]
  (if (= vidas 0)           //IF
      (perdeu)              //Faça
      (                     //else
        do                  //Para executar em cascata
        (println vidas)
        (jogo (- vidas 1))  //Chama ele mesmo
        (jogo (dec vidas))  //Pode usar esse tb, mais top
      )
  )
)

#Chamando a nova função passando um conjunto de letras q não repete
(forca/jogo 0 "MELANCIA" #{"A" "M"})

#Conjunto = Array
(def conjunto ["A" "B"])
(contains? conjunto "L")
(conj conjunto "X")       <- Add no conjunto
(disj conjunto "X")       <- Remove no conjunto

#Verifica se é par
(defn par [x] (= 0 (rem x 2)))

#Verifica se é impar
(defn impar [x] (not= 0 (rem x 2)))
(defn impar [x] (   = 1 (rem x 2)))

#Utilizando o contains
(defn letras-faltantes [palavra acertos] <- função q recebe 2 parametros
  (remove (fn [letra] (contains? acertos (str letra))) palavra)
  <- Acima: Remove acertos da palavra
)
#Testando
(letras-faltantes "melancia" #{"m"})
#Retorno -> (\e \l \a \n \c \i \a)

#Verifica se é um array vazio
(empty? (letras-faltantes palavra acertos))

#Testando a forca
(forca/jogo 5 "MELANCIA" #{"M" "E"})
(forca/jogo 5 "MELANCIA" #{"M" "E" "L" "A" "N" "C" "I"})

#Contains
(def palavra #{"A" "L" "U" "R"})
(contains? palavra "A")